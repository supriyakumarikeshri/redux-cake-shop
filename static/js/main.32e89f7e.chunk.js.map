{"version":3,"sources":["redux/cake/cakeReducer.js","redux/cake/cakeTypes.js","redux/iceCream/iceCreamReducer.js","redux/iceCream/iceCreamType.js","redux/rootReducer.js","redux/store.js","components/CakeContainer.js","redux/cake/cakeActions.js","components/IceCreamContainer.js","redux/iceCream/iceCreamActions.js","App.js","serviceWorker.js","index.js"],"names":["initialState","numOfCakes","cakeReducer","state","action","type","numOfIceCreams","iceCreamReducer","rootReducer","combineReducers","cake","iceCream","store","createStore","applyMiddleware","thunk","connect","numberOfCakes","dispatch","buyCake","props","className","onClick","numberOfIceCream","buyIceCream","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wOACMA,EAAe,CACpBC,WAAY,IAaGC,EAXK,WAAkC,IAAjCC,EAAgC,uDAAxBH,EAAcI,EAAU,uCACpD,OAAQA,EAAOC,MACd,ICNqB,WDMN,kCACXF,GADW,IAEdF,WAAYE,EAAMF,WAAW,IAE9B,QAAS,OAAOE,IETbH,EAAe,CACpBM,eAAgB,IAaDC,EAXS,WAAkC,IAAjCJ,EAAgC,uDAAxBH,EAAcI,EAAU,uCACxD,OAAQA,EAAOC,MACd,ICNyB,eDMN,kCACfF,GADe,IAElBG,eAAgBH,EAAMG,eAAe,IAEtC,QAAS,OAAOH,IEDJK,EALKC,YAAgB,CACnCC,KAAMR,EACNS,SAAUJ,ICEIK,EAFDC,YAAYL,EAAaM,YAAgBC,MCMvD,IAUeC,eAVS,SAAAb,GACtB,MAAM,CACJc,cAAgBd,EAAMO,KAAKT,eAGJ,SAAAiB,GACzB,MAAM,CACJC,QAAS,kBAAKD,ECfX,CACLb,KNLsB,iBKsBTW,EAlBf,SAAuBI,GACrB,OACE,yBAAKC,UAAU,OACX,iDAAuBD,EAAMH,eAC7B,4BAAQK,QAASF,EAAMD,SAAvB,gBEIR,IAUeH,eAVS,SAAAb,GACtB,MAAM,CACJoB,iBAAmBpB,EAAMQ,SAASL,mBAGX,SAAAY,GACzB,MAAM,CACJM,YAAa,kBAAKN,ECff,CACLb,KNL0B,qBKsBbW,EAlBf,SAA2BI,GACzB,OACE,yBAAKC,UAAU,OACX,oDAA0BD,EAAMG,kBAChC,4BAAQD,QAASF,EAAMI,aAAvB,oBEWOC,MAXf,WACE,OACC,kBAAC,IAAD,CAAUb,MAAOA,GAChB,yBAAKS,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,SCDcK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.32e89f7e.chunk.js","sourcesContent":["import { BUY_CAKE } from './cakeTypes'\r\nconst initialState = {\r\n\tnumOfCakes: 10\r\n}\r\n const cakeReducer = (state = initialState, action) =>{\r\n \tswitch (action.type){\r\n \t\tcase BUY_CAKE: return{\r\n \t\t\t...state,//current copy of state\r\n \t\t\tnumOfCakes: state.numOfCakes-1\r\n \t\t}\r\n \t\tdefault: return state\r\n \t}\r\n\r\n }\r\n\r\n export default cakeReducer","export const BUY_CAKE = 'BUY_CAKE'","import { BUY_ICECREAM } from './iceCreamType'\r\nconst initialState = {\r\n\tnumOfIceCreams: 30\r\n}\r\n const iceCreamReducer = (state = initialState, action) =>{\r\n \tswitch (action.type){\r\n \t\tcase BUY_ICECREAM: return{\r\n \t\t\t...state,//current copy of state\r\n \t\t\tnumOfIceCreams: state.numOfIceCreams-1\r\n \t\t}\r\n \t\tdefault: return state\r\n \t}\r\n\r\n }\r\n\r\n export default iceCreamReducer","export const BUY_ICECREAM = 'BUY_ICECREAM'","import { combineReducers } from 'redux'\r\nimport cakeReducer from './cake/cakeReducer'\r\nimport iceCreamReducer from './iceCream/iceCreamReducer'\r\n\r\nconst rootReducer = combineReducers({\r\n\tcake: cakeReducer,\r\n\ticeCream: iceCreamReducer\r\n})\r\n\r\nexport default rootReducer;","/*to provide redux-store to react-app, the react-redux library has component called provider*/\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport cakeReducer from './cake/cakeReducer';\r\nimport rootReducer from './rootReducer'\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport default store;","import React from 'react';\r\nimport { connect } from 'react-redux';//connect is high order component of react redux,connect react component to redux store\r\nimport { buyCake } from '../redux';//importing from index file of redux folder//buyCake is action(funtion)\r\n\r\nfunction CakeContainer(props) {\r\n  return (\r\n    <div className=\"App\">\r\n        <h2>Number of cakes - {props.numberOfCakes}</h2> \r\n        <button onClick={props.buyCake}>Buy Cake</button>\r\n    </div>\r\n  );\r\n}\r\nconst mapStateToProps = state => {\r\n  return{\r\n    numberOfCakes : state.cake.numOfCakes\r\n  }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n  return{\r\n    buyCake: () =>dispatch(buyCake())\r\n  }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(CakeContainer); \r\n","// define action creator, which is just a function, to define action\r\n//action is object with type property\r\nimport { BUY_CAKE } from './cakeTypes';\r\nexport const buyCake = () => {\r\n\treturn{\r\n\t\ttype: BUY_CAKE \r\n\t}\r\n}\r\n\r\n ","import React from 'react';\r\nimport { connect } from 'react-redux';//connect is high order component of react redux,connect react component to redux store\r\nimport { buyIceCream } from '../redux';//importing from index file of redux folder\r\n\r\nfunction IceCreamContainer(props) {\r\n  return (\r\n    <div className=\"App\">\r\n        <h2>Number of iceCream - {props.numberOfIceCream}</h2> \r\n        <button onClick={props.buyIceCream}>Buy Icecream</button>\r\n    </div>\r\n  );\r\n}\r\nconst mapStateToProps = state => {\r\n  return{\r\n    numberOfIceCream : state.iceCream.numOfIceCreams\r\n  }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n  return{\r\n    buyIceCream: () =>dispatch(buyIceCream())\r\n  }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(IceCreamContainer); \r\n","// define action creator, which is just a function, to define action\r\n//action is object with type property\r\nimport { BUY_ICECREAM } from './iceCreamType';\r\nexport const buyIceCream = () => {\r\n\treturn{\r\n\t\ttype: BUY_ICECREAM \r\n\t}\r\n}\r\n\r\n ","/*to provide redux-store to react-app, the react-redux library has component called provider*/\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport store from './redux/store'\nimport CakeContainer from './components/CakeContainer'; \nimport IceCreamContainer from './components/IceCreamContainer'; \n\n \nfunction App() {\n  return (\n  \t<Provider store={store}>\n    <div className=\"App\">\n      <CakeContainer />\n      <IceCreamContainer />\n    </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}